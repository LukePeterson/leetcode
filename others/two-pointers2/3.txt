package main

import "math"

func main() {

}

// We need to find the length of the longest subarray that has a
// sum less than or equal to k.

// For this example, let nums = [3, 2, 1, 3, 1, 1] and k = 5.

//  3, 2, 1, 3, 1, 1
//l ^
//r       ^

func longestSubArray(nums []int, k int) int {

	left := 0
	right := 0

	currentSum := 0
	maximumSum := 0

	for right < len(nums) { // keep moving right until we've processed everything

		currentSum += nums[right] // recalculate the current sum of the current window

		for currentSum > k { // WHILE the window is invalid ... (constraint metric)
			currentSum -= nums[left] // subtract the value from the left ..
			left++                   // ... and shrink the window from the left
		}

		// we have a valid window amount, so ...
		// have we reached a new maximum?
		maximumSum = int(math.Max(float64(maximumSum), float64(right-left+1)))

		right++
	}

	return maximumSum
}
